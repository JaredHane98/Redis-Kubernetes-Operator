Need to figure out how to update the cluster
Need to implement validation webhook




aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/f1r9h5l7


**Deploying the image**
Login to AWS with docker

docker build -t redis-operator/container .
docker tag redis-operator/container:latest public.ecr.aws/f1r9h5l7/redis-operator/container:latest
docker push public.ecr.aws/f1r9h5l7/redis-operator/container:latest
make deploy IMG=public.ecr.aws/f1r9h5l7/redis-operator/container:latest
make undeploy


**installing kubernetes dashboard**
helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard
kubectl apply -f dashboard-adminuser.yml 
kubectl -n kubernetes-dashboard create token admin-user --duration=48h 
kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443
https://127.0.0.1:8443



**installing certificate manager**
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.yaml



**setup commands** 
make install
make deploy






**kubectl commands**

**ssh**
kubectl exec -it redis-operator-system/redisreplication-0 -n redis-operator-system -- sh

**copy a file**
kubectl cp redis-operator-system/redisreplication-0:/mnt/dump.rdb /localdirectory/dump.rdb -n redis-operator-system

**copy a directory**
kubectl cp redis-operator-system/redisreplication-0:/mnt /localdirectory -n redis-operator-system

**get pvc**
kubectl get pvc -n redis-operator-system

**get configmap**
kubectl get configmap redis-config -n redis-operator-system -o yaml

**get command**
kubectl exec -it redisreplication-0 -n redis-operator-system -- redis-cli -c get tony



kubectl exec -it redisreplication-0 -n redis-operator-system -- redis-cli -h 10.244.0.88 -p 6379 --tls --cert '/home/jhane/certs/redis/tls.crt' --key '/home/jhane/certs/redis/tls.key' --cacert '/home/jhane/certs/redis/ca.crt'

**directly edit the pod**
kubectl edit pod redissentinel-0 -n redis-operator-system


kubectl get configmap redis-config-sentinel -n redis-operator-system -o yaml

kubectl exec -it pods/redissentinel-0 -n redis-operator-system -- sh


kubectl exec -it pods/redissentinel-0 -n redis-operator-system -- redis-cli SENTINEL masters


**check the logs of an init container** 
kubectl logs redissentinel-0 -n redis-operator-system --container init-config


kubectl exec -it redisreplication-0 -n redis-operator-system -- redis-cli -p 6379 --tls --cert '/tls/tls.crt' --key '/tls/tls.key' --cacert '/tls/ca.crt' -c set tony stark


kubectl exec -it redisreplication-1 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert '/tls/tls.crt' --key '/tls/tls.key' --cacert '/tls/ca.crt' info




**script to check the s-down-time of the sentinel. Not currently used
// livenessScript := []string{
	// 	"/bin/sh",
	// 	"-c",
	// 	`
	// 	s_down_time=$(redis-cli -p 26379 sentinel masters | grep -A1 's-down-time' | tail -n1);
	// 	if [ -z "$s_down_time" ]; then
	// 		exit 0;
	// 	elif [ "$s_down_time" -gt 60000 ]; then
	// 		exit 1;
	// 	else
	// 		exit 0;
	// 	fi
	// 	`,
	// }




redis-cli -h redisreplication-1.redisreplication-headless.redis-operator-system.svc.cluster.local -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt


kubectl exec -it redisreplication-2 -n redis-operator-system -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt info



kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set tony tark
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set money money
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set cool dude
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set what man
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set really man



**installing on AWS**


-run eksctl yaml file

-Install AWS Load balancer
https://kubernetes-sigs.github.io/aws-load-balancer-controller/latest/deploy/installation/


- Use Redis Exporter side car container to scrape redis for prometheus
- Install Prometheus directly into the cluster
- Install Grafana directly into the cluster





-install cilium 
  cilium install --chart-directory ./install/kubernetes/cilium --set kubeProxyReplacement=true --set gatewayAPI.enabled=true --set prometheus.enabled=true --set operator.prometheus.enabled=true --set hubble.enabled=true --set hubble.metrics.enableOpenMetrics=true --set hubble.metrics.enabled="{dns,drop,tcp,flow,port-distribution,icmp,httpV2:exemplars=true;labelsContext=source_ip\,source_namespace\,source_workload\,destination_ip\,destination_namespace\,destination_workload\,traffic_direction}"

-

-then install the replicas and the sentinels with the correct nodeselector

-install the deployment of gateway






**How to install Prometheus and Grafana Correctly**
- make sure you have jsonnet installed
- mkdir my-kube-prometheus; cd my-kube-prometheus
- jb init 
- jb install github.com/prometheus-operator/kube-prometheus/jsonnet/kube-prometheus@main
- wget https://raw.githubusercontent.com/prometheus-operator/kube-prometheus/main/example.jsonnet -O example.jsonnet # Make this file before hand
- wget https://raw.githubusercontent.com/prometheus-operator/kube-prometheus/main/build.sh -O build.sh
- chmod +x build.sh
- Add 
	  prometheus+:: {
        namespaces: ["default", "kube-system", "monitoring", "redis-operator-system", "redis-database"],
      },
	 To values
- kubectl create namespace redis-operator-system
- kubectl create namespace redis-database
- jb update
- ./build.sh example.jsonnet
- kubectl apply --server-side -f manifests/setup
- kubectl wait \
	--for condition=Established \
	--all CustomResourceDefinition \
	--namespace=monitoring
- kubectl apply -f manifests/



followed these guides 
https://github.com/prometheus-operator/kube-prometheus/blob/main/docs/customizing.md
https://github.com/prometheus-operator/kube-prometheus/blob/main/docs/customizations/monitoring-additional-namespaces.md

Use the dashboard found here
https://grafana.com/grafana/dashboards/763-redis-dashboard-for-prometheus-redis-exporter-1-x/



**installing aws load balancer controller**
https://docs.aws.amazon.com/eks/latest/userguide/lbc-helm.html


- I have already created AWSLoadBalancerControllerIAMPolicy . Don't create it again




kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt get ebae8ff2-2e25-49b1-b7a6-3d6f5e8a20bd



kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt get tony 
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt get money 
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt get cool 
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt get what 
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt get really 


kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set tony tark
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set money money
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set cool dude
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set what man
kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt set really man



kubectl exec -it redisreplication-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt CONFIG SET maxclients 100000

kubectl exec -it redissentinel-0 -n redis-database -- redis-cli -p 6379 -a supersecretpasswordnobodywillguess --tls --cert /tls/tls.crt --key /tls/tls.key --cacert /tls/ca.crt info

kubectl delete pod/redisreplication-0 -n redis-database --now
kubectl delete pod/redisreplication-1 -n redis-database --now
kubectl delete pod/redissentinel-0 -n redis-database --now




kubectl delete pod/redisreplication-2 -n redis-database --now
kubectl delete pod/redisreplication-1 -n redis-database --now